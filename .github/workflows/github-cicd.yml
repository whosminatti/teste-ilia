name: Deploy EKS Cluster com Terraform + Grafana com Helm

on:
  push:
    branches:
      - main

jobs:
  terraform-infrastructure:
    name: Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    outputs:
      cluster-name: ${{ steps.cluster-info.outputs.cluster-name }}

    steps:
      - name: Checa repo
        uses: actions/checkout@v3

      - name: Configura AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform state list
        run: terraform state list
        continue-on-error: true
      
      # - name: Terraform import
      #   run: terraform import module.eks.aws_iam_role.ebs_csi_driver_role teste-ilia-ebs-csi-driver-role
      
      # - name: Terraform Destroy
      #   run: terraform destroy -auto-approve -var-file="main.tfvars"
      
      - name: Terraform Plan
        run: terraform plan -var-file="main.tfvars" -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan

      - name: Get cluster info
        id: cluster-info
        run: |
          CLUSTER_NAME=$(terraform output -raw cluster_name || echo "teste-ilia")
          echo "cluster-name=${CLUSTER_NAME}" >> $GITHUB_OUTPUT

      - name: Wait for EKS cluster to be ready
        run: |
          echo "Aguardando cluster EKS estar completamente pronto..."
          aws eks wait cluster-active --name ${{ steps.cluster-info.outputs.cluster-name }}
          
          echo "Aguardando node group estar pronto..."
          aws eks wait nodegroup-active --cluster-name ${{ steps.cluster-info.outputs.cluster-name }} --nodegroup-name ${{ steps.cluster-info.outputs.cluster-name }}-node-group

  kubernetes-deployment:
    name: Deploy Kubernetes Resources
    runs-on: ubuntu-latest
    needs: terraform-infrastructure
    if: success()

    steps:
      - name: Checa repo
        uses: actions/checkout@v3

      - name: Configura AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ needs.terraform-infrastructure.outputs.cluster-name }} --region us-east-1

      - name: Verifica conectividade com cluster
        run: |
          kubectl cluster-info
          kubectl get nodes
          
      - name: Aguarda nodes estarem prontos
        run: |
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      # INSTALAR EBS CSI DRIVER
      - name: Instala AWS EBS CSI Driver Add-on
        run: |
          echo "Instalando EBS CSI Driver..."
          aws eks create-addon \
            --cluster-name ${{ needs.terraform-infrastructure.outputs.cluster-name }} \
            --addon-name aws-ebs-csi-driver \
            --resolve-conflicts OVERWRITE \
            --region us-east-1 || echo "Add-on j√° existe ou erro esperado"

      - name: Aguarda EBS CSI Driver estar pronto
        run: |
          echo "Aguardando EBS CSI Driver estar ativo..."
          timeout 600 bash -c '
          while true; do
            STATUS=$(aws eks describe-addon --cluster-name ${{ needs.terraform-infrastructure.outputs.cluster-name }} --addon-name aws-ebs-csi-driver --query "addon.status" --output text --region us-east-1 2>/dev/null || echo "CREATING")
            echo "Status do EBS CSI Driver: $STATUS"
            if [ "$STATUS" = "ACTIVE" ]; then
              echo "‚úÖ EBS CSI Driver est√° ativo!"
              break
            fi
            sleep 15
          done'

      - name: Verifica StorageClass gp2
        run: |
          echo "Verificando StorageClasses dispon√≠veis:"
          kubectl get storageclass
                  
          # Se gp2 n√£o existir, criar
          if ! kubectl get storageclass gp2; then
            echo "Criando StorageClass gp2..."
            cat <<EOF | kubectl apply -f -
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: gp2
          provisioner: ebs.csi.aws.com
          parameters:
            type: gp2
            fsType: ext4
          volumeBindingMode: WaitForFirstConsumer
          EOF
          fi

      - name: Cria namespace monitoring
        run: |
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

      - name: Cria PVC para Grafana
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: grafana-pvc
            namespace: monitoring
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 20Gi
            storageClassName: gp2
          EOF

      - name: Aguarda PVC estar Bound
        run: |
          echo "Aguardando PVC ser provisionado..."
          kubectl wait --for=condition=Bound pvc/grafana-pvc -n monitoring --timeout=300s
          kubectl get pvc -n monitoring

      - name: Add Grafana Helm repo and update
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update

      - name: Install ou upgrade Grafana Helm chart
        run: |
          helm upgrade --install my-grafana grafana/grafana --namespace monitoring \
            --set persistence.enabled=true \
            --set persistence.size=20Gi \
            --set persistence.existingClaim=grafana-pvc \
            --set adminPassword=${{ secrets.GRAFANA_ADMIN_PASSWORD }} \
            --set service.type=LoadBalancer \
            --wait --timeout=10m

      - name: Checa status recursos
        run: |
          echo "=== PODS ==="
          kubectl get pods -n monitoring
          echo "=== PVCs ==="
          kubectl get pvc -n monitoring
          echo "=== SERVICES ==="
          kubectl get svc -n monitoring
          echo "=== STORAGE CLASSES ==="
          kubectl get storageclass

      - name: Aguarda Grafana estar pronto
        run: |
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=600s

      - name: Get Grafana LoadBalancer URL
        run: |
          echo "Aguardando LoadBalancer URL..."
          sleep 120
          GRAFANA_URL=$(kubectl get svc my-grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          if [ -n "$GRAFANA_URL" ]; then
            echo "üöÄ Grafana dispon√≠vel em: http://$GRAFANA_URL"
            echo "üë§ Username: admin"
            echo "üîë Password: [definido no secret GRAFANA_ADMIN_PASSWORD]"
          else
            echo "‚è≥ LoadBalancer ainda n√£o tem URL externa. Status atual:"
            kubectl get svc my-grafana -n monitoring
            echo "Tentando pegar IP externo..."
            kubectl get svc my-grafana -n monitoring -o wide
          fi